#!/usr/bin/env python3
"""
Patch automatique pour face_recognition_models
Ce fichier doit √™tre import√© avant face_recognition
"""

import sys
import importlib

def apply_face_recognition_patch():
    """Applique le patch pour face_recognition_models"""
    try:
        # Importer face_recognition_models
        import face_recognition_models
        
        # Liste des attributs manquants et leurs √©quivalents
        missing_attributes = {
            'pose_predictor_five_point_model_location': 'pose_predictor_model_location',
            'shape_predictor_model_location': 'pose_predictor_model_location'
        }
        
        patches_applied = 0
        
        # Appliquer tous les patches n√©cessaires
        for missing_attr, existing_attr in missing_attributes.items():
            if not hasattr(face_recognition_models, missing_attr):
                if hasattr(face_recognition_models, existing_attr):
                    # Cr√©er l'alias manquant
                    setattr(face_recognition_models, missing_attr, getattr(face_recognition_models, existing_attr))
                    print(f"‚úÖ Patch appliqu√© : {missing_attr} = {existing_attr}")
                    patches_applied += 1
                else:
                    print(f"‚ùå Attribut source {existing_attr} non trouv√© pour {missing_attr}")
            else:
                print(f"‚úÖ L'attribut {missing_attr} existe d√©j√†")
        
        # G√©rer le cas sp√©cial de cnn_face_detector_model_location
        if not hasattr(face_recognition_models, 'cnn_face_detector_model_location'):
            # Cr√©er un attribut qui retourne un chemin vers un fichier inexistant
            def dummy_cnn_model():
                return "/tmp/nonexistent_cnn_model.dat"
            face_recognition_models.cnn_face_detector_model_location = dummy_cnn_model
            print("‚úÖ CNN face detector patch√© (mod√®le non disponible)")
            patches_applied += 1
        else:
            print("‚úÖ L'attribut cnn_face_detector_model_location existe d√©j√†")
        
        if patches_applied > 0:
            print(f"‚úÖ {patches_applied} patch(es) appliqu√©(s) avec succ√®s")
            return True
        else:
            print("‚úÖ Aucun patch n√©cessaire")
            return True
            
    except ImportError as e:
        print(f"‚ùå Erreur d'importation face_recognition_models : {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors de l'application du patch : {e}")
        return False

def patch_dlib_cnn_face_detection():
    """Patch dlib pour g√©rer l'absence du mod√®le CNN"""
    try:
        import dlib
        
        # Sauvegarder la fonction originale
        original_cnn_face_detection_model_v1 = getattr(dlib, 'cnn_face_detection_model_v1', None)
        
        # Cr√©er une fonction de remplacement qui l√®ve une exception explicite
        def dummy_cnn_face_detection_model_v1(model_path):
            raise RuntimeError("CNN face detection model not available in face_recognition_models==0.1.3. Please use HOG face detection instead.")
        
        # Appliquer le patch
        dlib.cnn_face_detection_model_v1 = dummy_cnn_face_detection_model_v1
        print("‚úÖ dlib.cnn_face_detection_model_v1 patch√©")
        return True
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du patch de dlib : {e}")
        return False

def patch_face_recognition_import():
    """Patch l'importation de face_recognition pour √©viter l'erreur CNN"""
    try:
        # Importer dlib d'abord et le patcher
        import dlib
        
        # Cr√©er une fonction de remplacement pour CNN
        def safe_cnn_face_detection_model_v1(model_path):
            raise RuntimeError("CNN face detection model not available in face_recognition_models==0.1.3. Please use HOG face detection instead.")
        
        # Appliquer le patch √† dlib
        dlib.cnn_face_detection_model_v1 = safe_cnn_face_detection_model_v1
        
        # Maintenant importer face_recognition en toute s√©curit√©
        import face_recognition
        print("‚úÖ face_recognition import√© avec succ√®s apr√®s patch dlib")
        return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'importation s√©curis√©e : {e}")
        return False

def patch_face_recognition_api_module():
    """Patch le module face_recognition.api pour √©viter l'erreur CNN"""
    try:
        # Importer dlib d'abord et le patcher
        import dlib
        
        # Cr√©er une fonction de remplacement pour CNN
        def safe_cnn_face_detection_model_v1(model_path):
            raise RuntimeError("CNN face detection model not available in face_recognition_models==0.1.3. Please use HOG face detection instead.")
        
        # Appliquer le patch √† dlib
        dlib.cnn_face_detection_model_v1 = safe_cnn_face_detection_model_v1
        
        # Maintenant importer face_recognition.api en toute s√©curit√©
        import face_recognition.api
        print("‚úÖ face_recognition.api import√© avec succ√®s apr√®s patch dlib")
        return True
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'importation de face_recognition.api : {e}")
        return False

# Appliquer le patch automatiquement lors de l'importation
if __name__ != "__main__":
    apply_face_recognition_patch()
    patch_dlib_cnn_face_detection()

if __name__ == "__main__":
    print("üîß Test du patch face_recognition_models...")
    if apply_face_recognition_patch():
        print("‚úÖ Patch appliqu√© avec succ√®s")
        
        # Appliquer le patch dlib
        patch_dlib_cnn_face_detection()
        
        # Tester l'importation de face_recognition.api avec l'API s√©curis√©e
        if patch_face_recognition_api_module():
            print("üéâ Le probl√®me d'attribut est r√©solu !")
        else:
            print("‚ùå √âchec de l'importation s√©curis√©e")
            sys.exit(1)
    else:
        print("‚ùå √âchec de l'application du patch")
        sys.exit(1)