#!/usr/bin/env python3
"""
Script de nettoyage pour corriger les probl√®mes de gestion des photos et √©v√©nements.
Ce script :
1. Nettoie les photos orphelines (sans √©v√©nement associ√©)
2. Corrige les associations utilisateur-√©v√©nement
3. V√©rifie l'int√©grit√© des donn√©es
"""

import os
import sys
from sqlalchemy.orm import Session
from database import get_db, create_tables
from models import User, Photo, FaceMatch, Event, UserEvent, UserType

def cleanup_orphaned_photos():
    """Nettoie les photos qui n'ont pas d'√©v√©nement associ√©"""
    db = next(get_db())
    try:
        # Trouver les photos sans √©v√©nement
        orphaned_photos = db.query(Photo).filter(Photo.event_id.is_(None)).all()
        
        print(f"üîç Trouv√© {len(orphaned_photos)} photos orphelines")
        
        for photo in orphaned_photos:
            # Essayer de trouver l'√©v√©nement du photographe
            if photo.photographer_id:
                event = db.query(Event).filter(Event.photographer_id == photo.photographer_id).first()
                if event:
                    photo.event_id = event.id
                    print(f"‚úÖ Photo {photo.filename} associ√©e √† l'√©v√©nement {event.name}")
                else:
                    # Supprimer la photo si aucun √©v√©nement trouv√©
                    print(f"üóëÔ∏è  Suppression de la photo orpheline {photo.filename}")
                    # Supprimer les correspondances de visages
                    db.query(FaceMatch).filter(FaceMatch.photo_id == photo.id).delete()
                    # Supprimer le fichier physique
                    if photo.file_path and os.path.exists(photo.file_path):
                        os.remove(photo.file_path)
                    # Supprimer l'enregistrement
                    db.delete(photo)
        
        db.commit()
        print("‚úÖ Nettoyage des photos orphelines termin√©")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erreur lors du nettoyage: {e}")
    finally:
        try:
            db.close()
        except Exception:
            pass

def fix_user_event_associations():
    """Corrige les associations utilisateur-√©v√©nement"""
    db = next(get_db())
    try:
        # Trouver les utilisateurs sans √©v√©nement
        users_without_events = db.query(User).filter(
            User.user_type == UserType.USER
        ).all()
        
        print(f"üîç V√©rification de {len(users_without_events)} utilisateurs")
        
        for user in users_without_events:
            # V√©rifier si l'utilisateur a d√©j√† une association
            existing_association = db.query(UserEvent).filter(UserEvent.user_id == user.id).first()
            
            if not existing_association:
                # Trouver un √©v√©nement par d√©faut (le premier disponible)
                default_event = db.query(Event).first()
                if default_event:
                    user_event = UserEvent(user_id=user.id, event_id=default_event.id)
                    db.add(user_event)
                    print(f"‚úÖ Utilisateur {user.username} associ√© √† l'√©v√©nement {default_event.name}")
        
        db.commit()
        print("‚úÖ Associations utilisateur-√©v√©nement corrig√©es")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erreur lors de la correction des associations: {e}")
    finally:
        try:
            db.close()
        except Exception:
            pass

def verify_data_integrity():
    """V√©rifie l'int√©grit√© des donn√©es"""
    db = next(get_db())
    try:
        # V√©rifier les photos sans fichier physique
        photos_without_file = []
        photos = db.query(Photo).all()
        
        for photo in photos:
            if photo.file_path and not os.path.exists(photo.file_path):
                photos_without_file.append(photo)
        
        if photos_without_file:
            print(f"‚ö†Ô∏è  {len(photos_without_file)} photos sans fichier physique:")
            for photo in photos_without_file:
                print(f"   - {photo.filename} (chemin: {photo.file_path})")
        else:
            print("‚úÖ Toutes les photos ont leur fichier physique")
        
        # V√©rifier les correspondances de visages orphelines
        orphaned_face_matches = db.query(FaceMatch).filter(
            ~FaceMatch.photo_id.in_(db.query(Photo.id))
        ).all()
        
        if orphaned_face_matches:
            print(f"‚ö†Ô∏è  {len(orphaned_face_matches)} correspondances de visages orphelines")
            # Supprimer les correspondances orphelines
            db.query(FaceMatch).filter(
                ~FaceMatch.photo_id.in_(db.query(Photo.id))
            ).delete()
            db.commit()
            print("‚úÖ Correspondances orphelines supprim√©es")
        else:
            print("‚úÖ Aucune correspondance de visage orpheline")
        
        # V√©rifier les utilisateurs sans selfie
        users_without_selfie = db.query(User).filter(
            User.user_type == UserType.USER,
            User.selfie_path.is_(None)
        ).all()
        
        print(f"‚ÑπÔ∏è  {len(users_without_selfie)} utilisateurs sans selfie")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    finally:
        try:
            db.close()
        except Exception:
            pass

def main():
    """Fonction principale"""
    print("üßπ D√©but du nettoyage de la base de donn√©es...")
    
    # Cr√©er les tables si n√©cessaire
    create_tables()
    
    # Nettoyer les photos orphelines
    cleanup_orphaned_photos()
    
    # Corriger les associations utilisateur-√©v√©nement
    fix_user_event_associations()
    
    # V√©rifier l'int√©grit√© des donn√©es
    verify_data_integrity()
    
    print("‚úÖ Nettoyage termin√© avec succ√®s!")

if __name__ == "__main__":
    main() 